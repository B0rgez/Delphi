unit uProVendas;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils,System.UITypes, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uTelaHerenca, Data.DB,
  FireDAC.Stan.Intf, FireDAC.Stan.Option, FireDAC.Stan.Param,
  FireDAC.Stan.Error, FireDAC.DatS, FireDAC.Phys.Intf, FireDAC.DApt.Intf,
  FireDAC.Stan.Async, FireDAC.DApt, FireDAC.Comp.DataSet, FireDAC.Comp.Client,
  Vcl.Grids, Vcl.DBGrids, Vcl.StdCtrls, Vcl.Mask, Vcl.ComCtrls, Vcl.DBCtrls,
  Vcl.Buttons, Vcl.ExtCtrls, uDTMconexao, uDTMVenda, JvExMask, JvToolEdit,
  JvBaseEdits, uEnum, cProVenda;

type
  TfrmProVenda = class(TfrmTelaHerenca)
    qryListagemvendaID: TFDAutoIncField;
    qryListagemclienteID: TIntegerField;
    qryListagemnome: TStringField;
    qryListagemdataVenda: TSQLTimeStampField;
    qryListagemtotalVenda: TFMTBCDField;
    editvendaID: TLabeledEdit;
    Label4: TLabel;
    lkpCliente: TDBLookupComboBox;
    LdataNascimento: TLabel;
    editdataVenda: TJvDateEdit;
    Panel2: TPanel;
    Panel3: TPanel;
    Panel4: TPanel;
    Panel5: TPanel;
    editValorTotal: TJvCalcEdit;
    Label1: TLabel;
    dbgridItensVenda: TDBGrid;
    lkpProduto: TDBLookupComboBox;
    Label2: TLabel;
    Label3: TLabel;
    editValorUnitario: TJvCalcEdit;
    editQuantidade: TJvCalcEdit;
    Label5: TLabel;
    editTotalProduto: TJvCalcEdit;
    btnAdicionarItem: TBitBtn;
    btnLimparItem: TBitBtn;
    Label6: TLabel;
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnAdicionarItemClick(Sender: TObject);
    procedure lkpProdutoExit(Sender: TObject);
    procedure editQuantidadeEnter(Sender: TObject);
    procedure editQuantidadeExit(Sender: TObject);
    procedure editValorUnitarioChange(Sender: TObject);
    procedure btnCancelarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure dtsListagemDataChange(Sender: TObject; Field: TField);
    procedure btnLimparItemClick(Sender: TObject);
    procedure dbgridItensVendaDblClick(Sender: TObject);
    procedure FormShow(Sender: TObject);


  private
    { Private declarations }
    oVenda: TVenda;
    function TotalizarProduto(valorUnitario, Quantidade: Double): Double;
    procedure LimparComponenteItem;
    procedure LimparCds;
    procedure CarregarRegistroSelecinado;
    function TotalizarVenda: Double;

  public
    { Public declarations }

    function Gravar(EstadoDoCadastro : TEstadoDoCadastro): boolean; override;
    function Apagar: Boolean; override;
  end;

var
  frmProVenda: TfrmProVenda;

implementation

{$R *.dfm}

procedure TfrmProVenda.FormCreate(Sender: TObject);
begin
  inherited;
  dtmVenda := TdtmVenda.Create(Self);
  oVenda := TVenda.Create(dtmConexao.ConexaoDBase); //instancia a classe
  dbgridItensVenda.DataSource := dtmVenda.dtsItensVenda;
  IndiceAtual := 'clienteID';
end;

procedure TfrmProVenda.FormShow(Sender: TObject);
begin
  inherited;
  dtmVenda.qryProdutos.Refresh;
end;

procedure TfrmProVenda.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
   dtmVenda.qryProdutos.Close;

   if Assigned(dtmVenda) then
      FreeAndNil(dtmVenda);

   if Assigned(oVenda) then
      FreeAndNil(oVenda);

end;

                         {$REGION 'Botões/Ações'}
procedure TfrmProVenda.btnAdicionarItemClick(Sender: TObject);
begin
  inherited;
  //Sinalizar para o campo ser preenchido!
  if lkpProduto.KeyValue = Null then
   begin
    MessageDlg ('Produto é um campo obrigatório', mtInformation,[mbOK],0);
    lkpProduto.SetFocus;
    abort;
   end;

  if editValorUnitario.Value <= 0 then
   begin
    MessageDlg ('O Valor Unitário não pode ser zero', mtInformation,[mbOK],0);
    editValorUnitario.SetFocus;
    abort;
   end;

  if editQuantidade.Value <= 0 then
   begin
    MessageDlg('A quantidade não pode ser zero ', mtInformation,[mbOK],0);
    editQuantidade.SetFocus;
    abort;
   end;

  //Para nao repetir os produtos
  if dtmVenda.cdsItensVenda.Locate('produtoID', lkpProduto.KeyValue, []) then
   begin
    MessageDlg('Este produto já foi selecionado', mtInformation, [mbOK], 0);
    lkpProduto.SetFocus;
    abort;
   end;

  editTotalProduto.Value := TotalizarProduto(editValorUnitario.Value, editQuantidade.Value);
  dtmVenda.cdsItensVenda.Append; //incluir um novo registro (append > Acrescentar)

  dtmVenda.cdsItensVenda.FieldByName('produtoID').AsString := lkpProduto.KeyValue;
  dtmVenda.cdsItensVenda.FieldByName('nomeProduto').AsString := dtmVenda.QryProdutos.FieldByName('nome').AsString;
  dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat := editQuantidade.Value;
  dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat := editValorUnitario.Value;
  dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat := editTotalProduto.Value;

  dtmVenda.cdsItensVenda.Post;             //mostra os valores colocados

  editValorTotal.Value := TotalizarVenda; //mostra o calculo total dos registros da grid

  LimparComponenteItem;

  lkpProduto.SetFocus
end;
//limpar tela

procedure TfrmProVenda.LimparComponenteItem;
begin
  lkpProduto.KeyValue     := null;
  editQuantidade.Value    := 0;
  editValorUnitario.Value := 0;
  editTotalProduto.Value  := 0;
end;




procedure TfrmProVenda.btnAlterarClick(Sender: TObject);
begin
  if oVenda.Selecionar(QryListagem.FieldByName('vendaID').AsInteger, dtmVenda.cdsItensVenda) then
   begin
    editVendaID.Text      := IntToStr(oVenda.VendaID);
    lkpCliente.KeyValue   := oVenda.ClienteID;
    editDataVenda.Date    := oVenda.DataVenda;
    editValorTotal.Value  := oVenda.TotalVenda;
   end
  else
   begin
    btnCancelar.Click;
    Abort
   end;
  inherited;
end;

procedure TfrmProVenda.btnCancelarClick(Sender: TObject);
begin
  inherited;
  LimparCds;
end;

procedure TfrmProVenda.btnGravarClick(Sender: TObject);
begin
  inherited;
  LimparCds;
end;

procedure TfrmProVenda.btnLimparItemClick(Sender: TObject);
begin
  inherited;
   //Certificar o produto selecionado
  if lkpProduto.KeyValue = Null then
   begin
    MessageDlg('Selecionar o Produto a ser excluído', mtInformation, [mbOK],0);
    dbgridItensVenda.SetFocus;
    abort;
   end;
  //ir na linha produto e excluir
  if dtmVenda.cdsItensVenda.Locate('produtoID', lkpProduto.KeyValue, []) then
   begin
    dtmVenda.cdsItensVenda.Delete;
    editValorTotal.Value := TotalizarVenda;
    LimparComponenteItem;
   end;
end;

procedure TfrmProVenda.btnNovoClick(Sender: TObject);
begin
 inherited;
  editDataVenda.Date := Date;
  lkpCliente.SetFocus;
  LimparCds;
end;


procedure TfrmProVenda.dbgridItensVendaDblClick(Sender: TObject);
begin
  inherited;
  CarregarRegistroSelecinado;
end;

procedure TfrmProVenda.dtsListagemDataChange(Sender: TObject; Field: TField);
begin
  inherited;

end;

{$ENDREGION}

                      {$REGION 'Função para calcular'}
function TfrmProVenda.TotalizarProduto(valorUnitario, Quantidade: Double): Double;
begin
 Result := valorUnitario * Quantidade;
end;

procedure TfrmProVenda.editQuantidadeEnter(Sender: TObject);
begin
  inherited;
  editTotalProduto.Value := TotalizarProduto(editValorUnitario.Value, editQuantidade.Value);
end;

procedure TfrmProVenda.editQuantidadeExit(Sender: TObject);
begin
  inherited;
  editTotalProduto.Value := TotalizarProduto(editValorUnitario.Value, editQuantidade.Value);
end;

procedure TfrmProVenda.LimparCds;
begin
  dtmVenda.cdsItensVenda.First;
  while not dtmVenda.cdsItensVenda.Eof do
   dtmVenda.cdsItensVenda.Delete;
end;


procedure TfrmProVenda.editValorUnitarioChange(Sender: TObject);
begin

end;

{$ENDREGION}

                       {$REGION 'Métodos Overrides'}

function TfrmProVenda.Apagar: Boolean;
begin
  if oVenda.Selecionar(qryListagem.FieldByName('vendaID').AsInteger, dtmVenda.cdsItensVenda) then
  begin
   Result := oVenda.ApagarDB;
  end;
end;

function TfrmProVenda.Gravar(EstadoDoCadastro: TEstadoDoCadastro): boolean;
begin
  if editvendaID.Text <> EmptyStr then
   oVenda.VendaID := StrToInt(editVendaID.Text)
  else
   oVenda.VendaID := 0;

  oVenda.ClienteID  := lkpCliente.KeyValue;
  oVenda.DataVenda  := editDataVenda.Date;
  oVenda.TotalVenda := editValorTotal.Value;

  if (EstadoDoCadastro = ecInserir) then
   Result := oVenda.InserirDB(dtmVenda.cdsItensVenda)
  else if (EstadoDoCadastro = ecAlterar) then
   Result := oVenda.AtualizarDB(dtmVenda.cdsItensVenda);

end;
                          {$ENDREGION}

procedure TfrmProVenda.lkpProdutoExit(Sender: TObject);
begin
  inherited;
  if lkpProduto.KeyValue <> null then
   dtmVenda.QryProdutos.Locate('produtoID', lkpProduto.KeyValue, []);

  if TDBLookupComboBox(Sender).KeyValue <> Null then
   begin
    editValorUnitario.Value := dtmVenda.QryProdutos.FieldByName('valor').AsFloat;
    editQuantidade.Value := 1;
    editTotalProduto.Value := TotalizarProduto(editValorUnitario.Value, editQuantidade.Value);
   end;

end;

procedure TfrmProVenda.CarregarRegistroSelecinado;
begin
  lkpProduto.KeyValue     := dtmVenda.cdsItensVenda.FieldByName('produtoID').AsString;
  editQuantidade.Value    := dtmVenda.cdsItensVenda.FieldByName('quantidade').AsFloat;
  editValorUnitario.Value := dtmVenda.cdsItensVenda.FieldByName('valorUnitario').AsFloat;
  editTotalProduto.Value  := dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat;
end;

function TfrmProVenda.TotalizarVenda:Double;
var
  Valor : Double;
begin
  valor := 0;
  dtmVenda.cdsItensVenda.First;
  while not dtmVenda.cdsItensVenda.Eof do
   begin
    valor := Valor + dtmVenda.cdsItensVenda.FieldByName('valorTotalProduto').AsFloat;
    dtmVenda.cdsItensVenda.Next;
   end;
   Result := Valor;
end;

end.
