unit cCadCategoria;

interface

uses
 System.Classes, System.SysUtils, System.UITypes, Vcl.Controls, Vcl.ExtCtrls,
 Vcl.Dialogs, uDTMconexao, Data.DB, FireDAC.Stan.Param, FireDAC.Comp.Client,
 FireDAC.Comp.UI;

type
  TCategoria = class

  private
    ConexaoDBase: TFDConnection;
    F_categoriaID: Integer;
    F_descricao: String;
   protected
    function GetCodigo: Integer;
    function GetDescricao: String;
    procedure SetCodigo(const Value: Integer);
    procedure SetDescricao(const Value: String);

  public
    constructor Create(aConexao: TFDConnection);
    destructor Destroy; override;
    function InserirDB: Boolean;
    function AtualizarDB: Boolean;
    function ApagarDB: Boolean;
    function Seleciona(id: Integer): Boolean;

  published
    property codigo: Integer read GetCodigo write SetCodigo;
    property descricao: String read GetDescricao write SetDescricao;
  end;


implementation

{ TCategoria }

uses uCadCategorias;

{$REGION 'Construtores e Destrutores'}

constructor TCategoria.Create (aConexao:TFDConnection);
begin
  ConexaoDBase := aConexao;
end;

destructor TCategoria.Destroy;
begin
  inherited;
end;

{$ENDREGION}

{$REGION 'CRUD' }
//parei aqui (dia 22/05)
function TCategoria.ApagarDB: Boolean;
var QryApagar: TFDQuery;
begin
  if MessageDlg('Apagar o Registro: ' + #13+#13+         //quebra linhas(Serquilha #)
               'Código: ' +IntToStr(F_categoriaID)+ #13+ //Cast
               'Descrição: '+F_descricao, mtConfirmation,
               [mbYes, mbNo], 0 ) = mrNo then
  begin
   Result := true;
   abort;
  end;

  QryApagar:= TFDQuery.Create(nil);
  try
   Result := true;

   QryApagar.Connection := ConexaoDBase;
   QryApagar.SQL.Add('DELETE FROM categorias ' +           //prestar atenção nos nomes dados no SQL!
                     'WHERE categoriaID = :categoriaID ');
   QryApagar.ParamByName('categoriaID').AsInteger := F_categoriaID;

   try
    QryApagar.ExecSQL;
   except
    Result := false;
   end;
  finally
   if Assigned(QryApagar) then
    FreeAndNil(QryApagar);
  end;

end;

function TCategoria.AtualizarDB: Boolean;
var
  QryAtualizar : TFDQuery;
begin
  QryAtualizar := TFDQuery.Create(nil);       //é recomendado colocar antes

  try
   Result := true;

   QryAtualizar.Connection := ConexaoDBase;
   QryAtualizar.SQL.Add('UPDATE categoria ' +
                        'SET descricao = :descricao ' +
                        'WHERE categoriaID = :categoriaID ');
   QryAtualizar.FieldbyName('categoriaID').AsInteger := Self.F_categoriaID;
   QryAtualizar.FieldbyName('descricao').AsString := Self.F_descricao;

   try
    QryAtualizar.ExecSQL;
   except
    Result := false;
   end;
  finally
   QryAtualizar.Free; //destruir objeto
  end;
end;

function TCategoria.InserirDB: Boolean;
var
  QryGravar: TFDQuery;                                                        //Runtime (Variavel que é chama somente no tempo de execução)
begin
  QryGravar := TFDQuery.Create(nil);
  try
   Result := true;                                                            //Retorna true caso nada aconteça
                                            //Instancia o Objeto
   QryGravar.Connection := ConexaoDBase;                                      //Atribuição
                                                          //Limpa buffer
   QryGravar.SQL.Add(' INSERT INTO categorias(descricao) VALUES(:descricao) '); //adicionando informações no banco de dados
   QryGravar.ParamByName('descricao').AsString := Self.F_descricao;              //Identifica os paramentros e coloca os valores
   try
    QryGravar.ExecSQL;                                                        //Encarrega de executar o SQL
   except
    Result := false;                                                          //Caso nao execute, false.
   end;
  finally
   if Assigned(QryGravar) then                                                //Metodo que verifica se foi instanciado
    FreeAndNil(QryGravar);                                                    //metodo que verifica se a variavel é null(ou nil)
  end;
end;

//uma coisa é diferente da outra, fique atento
function TCategoria.Seleciona(id: Integer): Boolean;
var
  QrySelecionar : TFDQuery;
begin
 QrySelecionar := TFDQuery.Create(nil);
 try
  Result := true;

  QrySelecionar.Connection := ConexaoDBase;
  QrySelecionar.SQL.Clear;
  QrySelecionar.SQL.add(' SELECT categoriaID,' +
                        '        descricao ' +
                        ' FROM categorias ' +
                        ' WHERE categoriaID = :categoriaID');
  QrySelecionar.ParamByName('categoriaID').AsInteger := id;    //passa parametro pra Query

  try
   QrySelecionar.Open;              //Abrir

   Self.F_categoriaID := QrySelecionar.FieldbyName('categoriaID').AsInteger; //recebe um campo do tipo inteiro
   Self.F_descricao   := QrySelecionar.FieldbyName('descricao').AsString;
  except
   Result := False;
  end;

 finally
   if Assigned(QrySelecionar) then   //Destructor
      FreeAndNil(QrySelecionar);
 end;
end;

{$ENDREGION}

{$REGION 'Gets and Sets'}

function TCategoria.GetCodigo: Integer;
begin
 Result := Self.F_categoriaID;
end;

function TCategoria.GetDescricao: String;
begin
 Result := Self.F_descricao;
end;

procedure TCategoria.SetCodigo(const Value: Integer);
begin
  Self.F_categoriaID := Value;
end;

procedure TCategoria.SetDescricao(const Value: String);
begin
  Self.F_descricao := Value;
end;

{$ENDREGION}

end.
