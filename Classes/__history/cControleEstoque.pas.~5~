unit cControleEstoque;

interface

uses
 System.Classes, System.SysUtils, System.UITypes, Vcl.Controls, Vcl.ExtCtrls,
 Vcl.Dialogs, uDTMconexao, Data.DB, FireDAC.Stan.Param, FireDAC.Comp.Client,
 FireDAC.Comp.UI, uDTMVenda, Datasnap.DBClient;

type
  TControleEstoque = class

  private
   ConexaoDBase : TFDConnection;
   F_produtoID: Integer;
   F_quantidade: Double;

  public
   constructor Create(sConexao: TFDConnection);
   destructor Destroy; override;
   function BaixarEstoque: Boolean;
   function RetornarEstoque: Boolean;

  published
   property ProdutoID:  Integer read F_produtoID  write F_produtoID;
   property Quantidade: Double  read F_quantidade write F_quantidade;

  end;

implementation


{$REGION 'Contrutor e Descontrutor'}



constructor TControleEstoque.Create(aConexao: TFDConnection);
begin
  ConexaoDBase := aConexao;
end;

destructor TControleEstoque.Destroy;
begin
  inherited;
end;



{$ENDREGION}

{$REGION 'Metodos'}

function TControleEstoque.BaixarEstoque: Boolean;
var
   QryControleEstoque : TFDQuery;
begin
  QryControleEstoque := TFDQuery.Create(nil);
  try
   Result := True;
   QryControleEstoque.Connection := ConexaoDBase;
   QryControleEstoque.SQL.Clear;
   QryControleEstoque.SQL.Add('UPDATE produtos ');
   QryControleEstoque.SQL.Add('SET quantidade = quantidade - :QtdeBaixa ');
   QryControleEstoque.SQL.Add('WHERE produtoID = :ProdutoID');

   QryControleEstoque.ParamByName('ProdutoID').AsInteger := ProdutoID;
   QryControleEstoque.ParamByName('QtdeBaixa').AsFloat := Quantidade;

   try
    QryControleEstoque.ExecSQL;
   except
    Result := false;
   end;

  finally
    if Assigned(QryControleEstoque) then
       FreeAndNil(QryControleEstoque)
  end;
end;

function TControleEstoque.RetornarEstoque: Boolean;
begin






end;

{$ENDREGION}

end.
